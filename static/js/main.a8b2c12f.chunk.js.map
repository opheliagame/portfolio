{"version":3,"sources":["components/About.js","components/Header.js","components/Gallery.js","images.js","App.js","serviceWorker.js","index.js"],"names":["About","Header","className","to","Gallery","oimages","useState","modal","setModal","imageIndex","setImageIndex","images","map","a","sort","Math","random","value","b","split","length","firstcol","slice","floor","secondcol","thirdcol","displayModal","column","id","src","title","description","key","onClick","alt","mainSrc","nextSrc","prevSrc","onCloseRequest","onMovePrevRequest","onMoveNextRequest","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a8b2c12f.chunk.js","sourcesContent":["import React from 'react';\n\nconst About = () => {\n    return (\n        <div>\n            this is the about page\n        </div>\n    )\n}\n\nexport default About","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n    return (\n        <div className=\"navigation\">\n          <h2 className=\"title\">anushka</h2>\n          \n          <Link to='/about' className=\"item\">about me</Link>\n\n        </div>\n    )\n}\n\nexport default Header","import React, { useState } from 'react';\nimport LightBox from 'react-image-lightbox';\nimport 'react-image-lightbox/style.css';\n\nconst customStyles = {\n    content : {\n      backgroundColor : 'rebeccapurple',\n      width: '10px',\n      height: '10px'\n    }\n  };\n\nconst Gallery = ({ oimages }) => {\n    const [modal, setModal] = useState(false)\n    const [imageIndex, setImageIndex] = useState(0)\n\n    let images = oimages\n        .map((a) => ({sort: Math.random(), value: a}))\n        .sort((a, b) => a.sort - b.sort)\n        .map((a) => a.value)\n    const split = images.length / 3\n    const firstcol = images.slice(0, Math.floor(split))\n    const secondcol = images.slice(Math.floor(split), Math.floor(split)*2)\n    const thirdcol = images.slice(Math.floor(split)*2, images.length)\n\n    images = [firstcol, secondcol, thirdcol]\n\n    const displayModal = () => {\n        setModal(true)\n    }\n\n    return (\n        <div className='gallery'>\n            {images.map(column => \n                <>\n                <div className='gallery-column'>\n                    {column.map(({ id, src, title, description }) => \n                        <>\n                        <div key={id} className='gallery-item'>\n                            <img onClick={displayModal} key={id} src={src} alt='blobs' />\n                        </div>\n                        </>\n                    )}\n                </div>\n                </>\n            )}\n\n            {modal && (\n                <LightBox \n                    mainSrc={oimages[imageIndex].src}\n                    nextSrc={oimages[(imageIndex + 1) % oimages.length].src}\n                    prevSrc={oimages[(imageIndex + oimages.length -1) % oimages.length].src}\n                    onCloseRequest={() => setModal(false)}\n                    onMovePrevRequest={() => \n                        setImageIndex((imageIndex + oimages.length - 1) % oimages.length)\n                    }  \n                    onMoveNextRequest={() => \n                        setImageIndex((imageIndex + 1) % oimages.length)\n                    }\n                />\n            )}\n\n            \n        </div>\n    )\n}\n\nexport default Gallery","const images = [\n    {id: 1, src: \"/assets/blobs/blobs1.png\", title: \"Blobs\", description: \"blobs image\"},\n    {id: 2, src: \"/assets/blobs/eyes.gif\", title: \"Blobs\", description: \"blobs image\"},\n    {id: 3, src: \"/assets/blobs/blobs3.png\", title: \"Blobs\", description: \"blobs image\"},\n    {id: 4, src: \"/assets/blobs/blobs2.png\", title: \"Blobs\", description: \"blobs image\"},\n    {id: 5, src: \"/assets/blobs/leaves.gif\", title: \"Blobs\", description: \"blobs image\"},\n    {id: 6, src: \"/assets/blobs/waves.gif\", title: \"Blobs\", description: \"blobs image\"},\n    {id: 7, src: \"/assets/blobs/leaves.gif\", title: \"Blobs\", description: \"blobs image\"},\n    {id: 8, src: \"/assets/blobs/waves1.gif\", title: \"Blobs\", description: \"blobs image\"},\n    {id: 9, src: \"/assets/blobs/stairs.png\", title: \"Blobs\", description: \"blobs image\"},\n    {id: 10, src: \"/assets/blobs/style_transfer.jpeg\", title: \"Blobs\", description: \"blobs image\"}\n\n]\n\nexport default images","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.css';\nimport About from './components/About';\nimport Header from './components/Header';\nimport Project from './components/Project';\nimport projects from './projects';\nimport Gallery from './components/Gallery';\nimport images from './images';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n\n        <Header />\n\n        <Route path='/about' component={About} />\n\n        <Gallery oimages={images}/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}